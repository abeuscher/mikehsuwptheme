@import "./_variables.scss";
$mq-support:true;


@mixin bp($bp, $clamp: false, $prop: "min-width") {
	$queries: ();
	@each $bp-name, $bp-value in $bps {
		$map-2: (#{$bp-name}: $bp-value);
		$queries: map-merge($queries, $map-2);
	} 

	$mq-cutoff: 5;

	@if $mq-support {
		$bp-width: map-get($queries, $bp);
		$keys: map-keys($queries);
		$bp-index: index($keys, $bp);
		$next-bp: if(length($keys) > $bp-index, nth($keys, $bp-index + 1), null);
		$prev-bp: if($bp-index > 1, nth($keys, $bp-index - 1), null);

		@if $clamp and $prop == "min-width" and $next-bp {
			@media only screen
				and (min-width: #{$bp-width})
				and (max-width: #{map-get($queries, $next-bp)})
				{ @content; }
		} @else if $clamp and $prop == "max-width" and $prev-bp {
			@media only screen
				and (max-width: #{$bp-width})
				and (min-width: #{map-get($queries, $prev-bp)})
				{ @content; }
		} @else {
			@media only screen and (#{$prop}: #{$bp-width}) { @content; }
		}
	} @else {
		@if index(map-keys($queries), $bp) >= $mq-cutoff {
			@content;
		}
	}
}
@mixin aspect-ratio($width, $height) {
	position: relative;
	&:after {
		content: "";
		display: block;
		padding-top: $height / $width * 100%;
	}

	& > * {
		display: block;
        height: 100%;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
	}
}
@mixin no-padding($side) {
  @if $side == "all" {
    .no-padding {
      padding: 0 !important;
    }
  }
  @else {
    .no-padding-#{$side} {
      padding-#{$side}: 0 !important;
    }
  }
}

@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;
    
    @if $direction == 'top' {
        border-left: $size solid transparent;
    	border-right: $size solid transparent;
    	border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
    	border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
    	border-right: $size solid $color;
    	border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color; 
        border-right: $size solid transparent;	
    } @else if $direction == 'top-right' {
        border-top: $size solid $color; 
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color; 
        border-right: $size solid transparent;	
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color; 
        border-left: $size solid transparent;
    }
}
@mixin ds-transition() {
	transition: 0.4s cubic-bezier(0.335, 0.815, 0.470, 1);
}